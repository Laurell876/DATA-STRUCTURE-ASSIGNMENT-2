
public class IterationMathLib extends MathLib {
	
	public int gcd(int x, int y) {
		while (x != y) { 
	        if (x > y)         
	            x = x - y;         
	        else        
	            y = y - x;         
	    } 
	    return x;
	};
	
	/*
	 * 
	 * The original "use" of the Ackermann function was to show that there are functions which are not primitive recursive, i.e. which cannot be computed by using only for loops with predetermined upper limits. The Ackermann function is such a function, it grows too fast to be primitive recursive.
	 */
		
	public int ack(int x, int y) {
		 if(inM < 0 || inN < 0) return;

	        ArrayList<ArrayList<Integer>> arr = new ArrayList<ArrayList<Integer>>();

	        for(int m = 0; m <= inM; m++){
	            arr.add(new ArrayList<Integer>());
	        }

	        Boolean done = false;

	        while(done == false){
	            for(int m = 0; m <= inM; m++){
	                int n = arr.get(m).size();
	                int a = 0;

	                if(m == 0) a = n + 1;
	                else if(n == 0){
	                    if(arr.get(m - 1).size() <= 1) break;
	                    a = arr.get(m - 1).get(1);
	                } else {
	                    int k = arr.get(m).get(n - 1);
	                    if(arr.get(m - 1).size() <= k) break;
	                    a = arr.get(m - 1).get(k);
	                }

	                arr.get(m).add(a);

	                if(m == inM && n == inN){
	                    System.out.println("Ack(" + inM + ", " + inN + ") = " + a);
	                    done = true;
	                    break;
	                }
	            }
	        }
	    }
	};
	
	
	
	/*
	The Fibonacci numbers are a sequence of integers in
	which the first two elements are 0 & 1, and each following
	elements are the sum of the two preceding elements:
	 */
	
	public int fib(int x) {
		int secondBefore=0, predecessor = 0, curr = 1;

        for (int i = 1; i < x ; i++) {

            secondBefore = predecessor;

            predecessor = curr;

            curr = secondBefore + predecessor;

        }
        return curr;
	};
	
	
	
	public int hanoi(int n) {
		return 1;
	};

}
